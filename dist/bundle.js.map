{"version":3,"sources":["webpack:///webpack/bootstrap 02029300db0f099de711","webpack:///./src/Board.js","webpack:///./src/ChessPieces.js","webpack:///./src/Game.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iDAAiD;AACjF,iCAAiC,iDAAiD;AAClF;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,WAAW,GAAG,WAAW;AACtF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;ACpfA;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oHAAoH;AACpH;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 02029300db0f099de711","export default class Board {\r\n  constructor() {\r\n    this.boardWrap = document.getElementById('boardWrap');\r\n    this.rowLength = 8;\r\n    this.isTileLight = true;\r\n    this.tiles = [];\r\n    this.x = 1;\r\n    this.y = 1;\r\n  }\r\n\r\n  render() {\r\n    for (let i = 1; i <= 64; i += 1) {\r\n      const tile = document.createElement('div');\r\n      this.x += 1;\r\n      if ((i - 1) % this.rowLength === 0) {\r\n        this.x = 1;\r\n        this.y = i === 1 ? 1 : this.y + 1;\r\n      } else {\r\n        this.isTileLight = !this.isTileLight;\r\n      }\r\n      tile.classList += 'board__tile';\r\n      if (this.isTileLight) {\r\n        tile.classList += ' board__tile--light';\r\n      } else {\r\n        tile.classList += ' board__tile--dark';\r\n      }\r\n      this.boardWrap.appendChild(tile);\r\n      this.tiles.push({\r\n        domEl: tile,\r\n        x: this.x,\r\n        y: this.y,\r\n      });\r\n    }\r\n  }\r\n\r\n  getTiles() {\r\n    return this.tiles;\r\n  }\r\n\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Board.js\n// module id = 0\n// module chunks = 0","export class ChessPiece {\r\n  constructor(x, y, color) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.numberOfMoves = 0;\r\n    this.isSelected = false;\r\n    this.color = color;\r\n    this.distanceUnit = 100;\r\n    this.possibleMoves = [];\r\n    this.element = document.createElement('div');\r\n    this.image = 'image';\r\n  }\r\n\r\n  move(xDest, yDest) {\r\n    let toSubstractX = this.distanceUnit;\r\n    let toSubstractY = this.distanceUnit;\r\n    let toMultiplyX = xDest;\r\n    let toMultiplyY = yDest;\r\n    if (xDest === 1) {\r\n      toMultiplyX = 0;\r\n      toSubstractX = 0;\r\n    }\r\n    if (yDest === 1) {\r\n      toMultiplyY = 0;\r\n      toSubstractY = 0;\r\n    }\r\n    this.element.style.top = `${(this.distanceUnit * toMultiplyY) - toSubstractY}px`;\r\n    this.element.style.left = `${(this.distanceUnit * toMultiplyX) - toSubstractX}px`;\r\n    this.x = xDest;\r\n    this.y = yDest;\r\n    this.numberOfMoves += 1;\r\n  }\r\n\r\n  buildElement() {\r\n    this.element.classList += ' board__chesspiece';\r\n    this.element.style.backgroundImage = `url(./static/img/${this.image}_${this.color}.png)`;\r\n    document.getElementById('boardWrap').appendChild(this.element);\r\n    this.move(this.x, this.y);\r\n    this.numberOfMoves = 0;\r\n    this.initListeners();\r\n  }\r\n\r\n  getElement() {\r\n    return this.element;\r\n  }\r\n\r\n  getPossibleMoves() {\r\n    return this.possibleMoves;\r\n  }\r\n\r\n  setPossibleMoves(posMoves) {\r\n    this.possibleMoves = posMoves;\r\n  }\r\n\r\n  initListeners() {\r\n    this.element.addEventListener('click', () => {\r\n      this.isSelected = true;\r\n    }, true);\r\n  }\r\n\r\n  dispose() {\r\n    this.element.remove();\r\n  }\r\n}\r\n\r\nexport class Pawn extends ChessPiece {\r\n  constructor(x, y, color) {\r\n    super(x, y, color);\r\n    this.image = 'pawn';\r\n    this.buildElement();\r\n  }\r\n\r\n  calculatePossibleMoves(chessPiecies) {\r\n    const moves = [];\r\n    let isFieldInFrontEmpty = true;\r\n    let areTwoFieldsInFrontEmpty = true;\r\n    switch (this.color) {\r\n      case 'white': {\r\n        chessPiecies.forEach((figure) => {\r\n          if ((figure.x === this.x) && (figure.y === this.y - 1)) {\r\n            isFieldInFrontEmpty = false;\r\n          }\r\n\r\n          if ((figure.x === this.x + 1) && figure.y === this.y - 1) {\r\n            moves.push(\r\n              {\r\n                x: this.x + 1,\r\n                y: this.y - 1,\r\n              },\r\n            );\r\n          }\r\n\r\n          if ((figure.x === this.x - 1) && figure.y === this.y - 1) {\r\n            moves.push(\r\n              {\r\n                x: this.x - 1,\r\n                y: this.y - 1,\r\n              },\r\n            );\r\n          }\r\n\r\n          if (this.numberOfMoves > 0 || ((figure.x === this.x) && (figure.y === this.y - 2))) {\r\n            areTwoFieldsInFrontEmpty = false;\r\n          }\r\n        });\r\n        if (isFieldInFrontEmpty === true) {\r\n          moves.push(\r\n            {\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            },\r\n          );\r\n        }\r\n\r\n        if (areTwoFieldsInFrontEmpty === true) {\r\n          moves.push(\r\n            {\r\n              x: this.x,\r\n              y: this.y - 2,\r\n            },\r\n          );\r\n        }\r\n        this.possibleMoves.push(...moves);\r\n        break;\r\n      }\r\n      case 'black': {\r\n        chessPiecies.forEach((figure) => {\r\n          if ((figure.x === this.x) && (figure.y === this.y + 1)) {\r\n            isFieldInFrontEmpty = false;\r\n          }\r\n\r\n          if ((figure.x === this.x + 1) && figure.y === this.y + 1) {\r\n            moves.push(\r\n              {\r\n                x: this.x + 1,\r\n                y: this.y + 1,\r\n              },\r\n            );\r\n          }\r\n\r\n          if ((figure.x === this.x - 1) && figure.y === this.y + 1) {\r\n            moves.push(\r\n              {\r\n                x: this.x - 1,\r\n                y: this.y + 1,\r\n              },\r\n            );\r\n          }\r\n\r\n          if ((this.numberOfMoves > 0) || ((figure.x === this.x) && (figure.y === this.y + 2))) {\r\n            areTwoFieldsInFrontEmpty = false;\r\n          }\r\n          this.possibleMoves.push(...moves);\r\n        });\r\n        if (isFieldInFrontEmpty === true) {\r\n          moves.push(\r\n            {\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            },\r\n          );\r\n        }\r\n\r\n        if (areTwoFieldsInFrontEmpty === true) {\r\n          moves.push(\r\n            {\r\n              x: this.x,\r\n              y: this.y + 2,\r\n            },\r\n          );\r\n        }\r\n        this.possibleMoves.push(...moves);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class King extends ChessPiece {\r\n  constructor(x, y, color) {\r\n    super(x, y, color);\r\n    this.image = 'king';\r\n    this.buildElement();\r\n  }\r\n\r\n  calculatePossibleMoves() {\r\n    const moves = [{\r\n      x: this.x,\r\n      y: this.y + 1,\r\n    },\r\n    {\r\n      x: this.x,\r\n      y: this.y - 1,\r\n    },\r\n    {\r\n      x: this.x + 1,\r\n      y: this.y,\r\n    },\r\n    {\r\n      x: this.x - 1,\r\n      y: this.y,\r\n    },\r\n    {\r\n      x: this.x - 1,\r\n      y: this.y - 1,\r\n    },\r\n    {\r\n      x: this.x + 1,\r\n      y: this.y + 1,\r\n    },\r\n    {\r\n      x: this.x - 1,\r\n      y: this.y + 1,\r\n    },\r\n    {\r\n      x: this.x + 1,\r\n      y: this.y - 1,\r\n    },\r\n    ];\r\n    this.possibleMoves.push(...moves);\r\n  }\r\n}\r\n\r\nexport class Quenn extends ChessPiece {\r\n  constructor(x, y, color) {\r\n    super(x, y, color);\r\n    this.image = 'queen';\r\n    this.buildElement();\r\n  }\r\n\r\n  calculatePossibleMoves(chessPiecies) {\r\n    const moves = [];\r\n    /* What's going on with the lock and all this mess?\r\n\r\n      A figure can move up to 7 fields hence the 7 iterations of the for loop.\r\n      In chess, all figures(except knight)can't jump over other figures.Hence the forEach loop,which iterater over chesspiecies passed from the Game class later on;\r\n      When we find figure,that has the same coordinates that we want to add to our possible moves,we should stop pushing next moves,becasue we don't want a figure to be able to jump over other figures.\r\n      Therefore,when a condition is met,a particular lock* flag is enabled which stops pushing invalid moves to the array in next itterations.\r\n    */\r\n    let lockWest = false;\r\n    let lockEast = false;\r\n    let lockNorth = false;\r\n    let lockSouth = false;\r\n    let lockWestNorth = false;\r\n    let lockEastNorth = false;\r\n    let lockWestSouth = false;\r\n    let lockEastSouth = false;\r\n    for (let i = 1; i <= 7; i += 1) {\r\n      chessPiecies.forEach((piece) => {\r\n        if (lockSouth === false) {\r\n          if ((piece.x === this.x) && (piece.y === this.y + i)) {\r\n            lockSouth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x,\r\n            y: this.y + i,\r\n          });\r\n        }\r\n\r\n        if (lockNorth === false) {\r\n          if ((piece.x === this.x) && (piece.y === this.y - i)) {\r\n            lockNorth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x,\r\n            y: this.y - i,\r\n          });\r\n        }\r\n\r\n        if (lockEast === false) {\r\n          if ((piece.x === this.x + i) && (piece.y === this.y)) {\r\n            lockEast = true;\r\n          }\r\n          moves.push({\r\n            x: this.x + i,\r\n            y: this.y,\r\n          });\r\n        }\r\n\r\n        if (lockWest === false) {\r\n          if ((piece.x === this.x - i) && (piece.y === this.y)) {\r\n            lockWest = true;\r\n          }\r\n          moves.push({\r\n            x: this.x - i,\r\n            y: this.y,\r\n          });\r\n        }\r\n\r\n        if (lockWestNorth === false) {\r\n          if ((piece.x === this.x - i) && (piece.y === this.y - i)) {\r\n            lockWestNorth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x - i,\r\n            y: this.y - i,\r\n          });\r\n        }\r\n\r\n        if (lockEastSouth === false) {\r\n          if ((piece.x === this.x + i) && (piece.y === this.y + i)) {\r\n            lockEastSouth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x + i,\r\n            y: this.y + i,\r\n          });\r\n        }\r\n\r\n        if (lockWestSouth === false) {\r\n          if ((piece.x === this.x - i) && (piece.y === this.y + i)) {\r\n            lockWestSouth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x - i,\r\n            y: this.y + i,\r\n          });\r\n        }\r\n\r\n        if (lockEastNorth === false) {\r\n          if ((piece.x === this.x + i) && (piece.y === this.y - i)) {\r\n            lockEastNorth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x + i,\r\n            y: this.y - i,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    this.possibleMoves.push(...moves);\r\n  }\r\n}\r\n\r\nexport class Rook extends ChessPiece {\r\n  constructor(x, y, color) {\r\n    super(x, y, color);\r\n    this.image = 'rook';\r\n    this.buildElement();\r\n  }\r\n\r\n  calculatePossibleMoves(chessPiecies) {\r\n    const moves = [];\r\n    let lockWest = false;\r\n    let lockEast = false;\r\n    let lockNorth = false;\r\n    let lockSouth = false;\r\n    for (let i = 1; i <= 7; i += 1) {\r\n      chessPiecies.forEach((piece) => {\r\n        if (lockSouth === false) {\r\n          if ((piece.x === this.x) && (piece.y === this.y + i)) {\r\n            lockSouth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x,\r\n            y: this.y + i,\r\n          });\r\n        }\r\n\r\n        if (lockNorth === false) {\r\n          if ((piece.x === this.x) && (piece.y === this.y - i)) {\r\n            lockNorth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x,\r\n            y: this.y - i,\r\n          });\r\n        }\r\n\r\n        if (lockEast === false) {\r\n          if ((piece.x === this.x + i) && (piece.y === this.y)) {\r\n            lockEast = true;\r\n          }\r\n          moves.push({\r\n            x: this.x + i,\r\n            y: this.y,\r\n          });\r\n        }\r\n\r\n        if (lockWest === false) {\r\n          if ((piece.x === this.x - i) && (piece.y === this.y)) {\r\n            lockWest = true;\r\n          }\r\n          moves.push({\r\n            x: this.x - i,\r\n            y: this.y,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    this.possibleMoves.push(...moves);\r\n  }\r\n}\r\n\r\nexport class Bishop extends ChessPiece {\r\n  constructor(x, y, color) {\r\n    super(x, y, color);\r\n    this.image = 'bishop';\r\n    this.buildElement();\r\n  }\r\n\r\n  calculatePossibleMoves(chessPiecies) {\r\n    const moves = [];\r\n    let lockWestNorth = false;\r\n    let lockEastNorth = false;\r\n    let lockWestSouth = false;\r\n    let lockEastSouth = false;\r\n    for (let i = 1; i <= 7; i += 1) {\r\n      chessPiecies.forEach((piece) => {\r\n        if (lockWestNorth === false) {\r\n          if ((piece.x === this.x - i) && (piece.y === this.y - i)) {\r\n            lockWestNorth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x - i,\r\n            y: this.y - i,\r\n          });\r\n        }\r\n\r\n        if (lockEastSouth === false) {\r\n          if ((piece.x === this.x + i) && (piece.y === this.y + i)) {\r\n            lockEastSouth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x + i,\r\n            y: this.y + i,\r\n          });\r\n        }\r\n\r\n        if (lockWestSouth === false) {\r\n          if ((piece.x === this.x - i) && (piece.y === this.y + i)) {\r\n            lockWestSouth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x - i,\r\n            y: this.y + i,\r\n          });\r\n        }\r\n\r\n        if (lockEastNorth === false) {\r\n          if ((piece.x === this.x + i) && (piece.y === this.y - i)) {\r\n            lockEastNorth = true;\r\n          }\r\n          moves.push({\r\n            x: this.x + i,\r\n            y: this.y - i,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    this.possibleMoves.push(...moves);\r\n  }\r\n}\r\n\r\nexport class Knight extends ChessPiece {\r\n  constructor(x, y, color) {\r\n    super(x, y, color);\r\n    this.image = 'knight';\r\n    this.buildElement();\r\n  }\r\n\r\n  calculatePossibleMoves() {\r\n    const moves = [{\r\n      x: this.x + 2,\r\n      y: this.y + 1,\r\n    },\r\n    {\r\n      x: this.x + 2,\r\n      y: this.y - 1,\r\n    },\r\n    {\r\n      x: this.x + 1,\r\n      y: this.y + 2,\r\n    },\r\n    {\r\n      x: this.x + 1,\r\n      y: this.y - 2,\r\n    },\r\n    {\r\n      x: this.x - 1,\r\n      y: this.y - 2,\r\n    },\r\n    {\r\n      x: this.x - 2,\r\n      y: this.y - 1,\r\n    },\r\n    {\r\n      x: this.x - 1,\r\n      y: this.y + 2,\r\n    },\r\n    {\r\n      x: this.x - 2,\r\n      y: this.y + 1,\r\n    },\r\n    ];\r\n    this.possibleMoves.push(...moves);\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ChessPieces.js\n// module id = 1\n// module chunks = 0","import Board from './Board';\r\nimport {\r\n  Pawn,\r\n  Rook,\r\n  Knight,\r\n  Bishop,\r\n  Quenn,\r\n  King,\r\n}\r\nfrom './ChessPieces';\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.chessPieces = [];\r\n    this.board = new Board();\r\n    this.selectedChessPiece = null;\r\n    this.validMoves = [];\r\n    this.invalidMoves = [];\r\n    this.turn = 'white';\r\n  }\r\n\r\n  init() {\r\n    this.board.render();\r\n    this.chessPieces.push(\r\n      new Rook(1, 1, 'black'),\r\n      new Knight(2, 1, 'black'),\r\n      new Bishop(3, 1, 'black'),\r\n      new Quenn(4, 1, 'black'),\r\n      new King(5, 1, 'black'),\r\n      new Bishop(6, 1, 'black'),\r\n      new Knight(7, 1, 'black'),\r\n      new Rook(8, 1, 'black'),\r\n      new Rook(1, 8, 'white'),\r\n      new Knight(2, 8, 'white'),\r\n      new Bishop(3, 8, 'white'),\r\n      new Quenn(4, 8, 'white'),\r\n      new King(5, 8, 'white'),\r\n      new Bishop(6, 8, 'white'),\r\n      new Knight(7, 8, 'white'),\r\n      new Rook(8, 8, 'white'),\r\n    );\r\n\r\n    for (let i = 1; i <= 8; i += 1) {\r\n      this.chessPieces.push(\r\n        new Pawn(i, 2, 'black'),\r\n        new Pawn(i, 7, 'white'),\r\n      );\r\n    }\r\n\r\n    this.handleControls();\r\n  }\r\n\r\n  checkWhichChessPieceIsSelected() {\r\n    this.chessPieces.forEach((figure) => {\r\n      if (figure.isSelected && (this.selectedChessPiece === null || this.selectedChessPiece.isSelected === false)) { // so you can't select other figure when one is already selected\r\n        this.selectedChessPiece = figure;\r\n      }\r\n    });\r\n    // console.log(this.selectedChessPiece);\r\n  }\r\n\r\n  clearValidMoves() {\r\n    if (this.selectedChessPiece !== null) {\r\n      this.selectedChessPiece.setPossibleMoves([]);\r\n      this.validMoves = [];\r\n    }\r\n  }\r\n\r\n  beatTheFigure(moveToMake) {\r\n    this.chessPieces.forEach((figure, index, object) => {\r\n      if ((figure.x === moveToMake.x) && (figure.y === moveToMake.y) && (figure !== this.selectedChessPiece) && this.selectedChessPiece !== null) {\r\n        console.log(this.selectedChessPiece)\r\n        figure.dispose();\r\n        object.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  setProperTurn() {\r\n    if (this.turn === 'white') {\r\n      this.turn = 'black';\r\n    }\r\n    else if (this.turn === 'black') {\r\n      this.turn = 'white';\r\n    }\r\n\r\n    this.chessPieces.forEach((figure) => {\r\n      if (figure.color === this.turn) {\r\n        figure.element.style.pointerEvents = 'auto';\r\n      } else {\r\n        figure.element.style.pointerEvents = 'none';\r\n      }\r\n    });\r\n  }\r\n\r\n  // disableOtherFigures() {\r\n  //   this.chessPieces.forEach((figure) => {\r\n  //     if (this.selectedChessPiece !== null) {\r\n  //       if ((this.selectedChessPiece.isSelected === true) && (figure !== this.selectedChessPiece)) {\r\n  //         figure.element.style.pointerEvents = 'none';\r\n  //       } else {\r\n  //         figure.element.style.pointerEvents = 'auto';\r\n  //       }\r\n  //     } else {\r\n  //       console.log('auto')\r\n  //       figure.element.style.pointerEvents = 'auto';\r\n        \r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  handleControls() {\r\n    this.board.boardWrap.addEventListener('click', (event) => {\r\n      this.clearValidMoves();\r\n      this.checkWhichChessPieceIsSelected();\r\n      this.checkForValidMoves();\r\n      if (this.selectedChessPiece === null) {\r\n        return;\r\n      }\r\n      this.board.getTiles().forEach((tile) => {\r\n        if (tile.domEl === event.target && this.selectedChessPiece.isSelected) {\r\n          console.log(this.selectedChessPiece)\r\n          this.validMoves.forEach((validMove) => {\r\n            if ((validMove.x === tile.x) && (validMove.y === tile.y) && this.selectedChessPiece !== null) {\r\n              this.beatTheFigure(validMove);\r\n              this.selectedChessPiece.move(tile.x, tile.y);\r\n              this.selectedChessPiece.isSelected = false;\r\n              this.selectedChessPiece = null;\r\n              this.setProperTurn();\r\n            }\r\n          });\r\n          if (this.selectedChessPiece !== null) {\r\n            this.selectedChessPiece.isSelected = false;\r\n          }\r\n        }\r\n      });\r\n    }, false);\r\n    this.clearValidMoves();\r\n  }\r\n\r\n  checkForValidMoves() {\r\n    if (this.selectedChessPiece !== null) {\r\n      this.selectedChessPiece.calculatePossibleMoves(this.chessPieces);\r\n      this.validMoves.push(...this.selectedChessPiece.getPossibleMoves());\r\n      const indexesToRemove = [];\r\n      this.validMoves.forEach((move, index) => {\r\n        this.chessPieces.forEach((figure) => {\r\n          if ((figure.x === move.x) && (figure.y === move.y) && (this.selectedChessPiece.color === figure.color)) {\r\n            indexesToRemove.push(index);\r\n          }\r\n        });\r\n      });\r\n      let shift = 0;\r\n      indexesToRemove.forEach((i) => {\r\n        this.validMoves.splice(i - shift, 1);\r\n        shift += 1;\r\n      });\r\n    }\r\n  }\r\n\r\n  gameLoop() {\r\n    window.requestAnimationFrame(this.gameLoop.bind(this));\r\n  }\r\n\r\n}\r\n\r\nconst game = new Game();\r\ngame.init();\r\nwindow.setInterval(function() {\r\n  console.log(game.selectedChessPiece)\r\n}, 1000)\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Game.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}